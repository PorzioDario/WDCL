//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\porziod\Documents\Visual Studio 2015\Projects\WDCL\WDCL\WDCL.g4 by ANTLR 4.6.4

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace WDCL {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.4")]
[System.CLSCompliant(false)]
public partial class WDCLParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, NOT=5, AND=6, OR=7, EQ=8, NOTEQ=9, LTEQ=10, 
		LT=11, GTEQ=12, GT=13, IN=14, COMMA=15, PLUS_OP=16, MINUS_OP=17, MUL_OP=18, 
		DIV_OP=19, MOD_OP=20, POW_OP=21, ID=22, INT=23, FLOAT=24, DATE=25, COMMENT=26, 
		WS=27, STRING=28;
	public const int
		RULE_parse = 0, RULE_condition = 1, RULE_exp = 2;
	public static readonly string[] ruleNames = {
		"parse", "condition", "exp"
	};

	private static readonly string[] _LiteralNames = {
		null, "'true'", "'false'", "'('", "')'", null, null, null, "'='", "'<>'", 
		"'<='", "'<'", "'>='", "'>'", null, "','", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "NOT", "AND", "OR", "EQ", "NOTEQ", "LTEQ", 
		"LT", "GTEQ", "GT", "IN", "COMMA", "PLUS_OP", "MINUS_OP", "MUL_OP", "DIV_OP", 
		"MOD_OP", "POW_OP", "ID", "INT", "FLOAT", "DATE", "COMMENT", "WS", "STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "WDCL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public WDCLParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ParseContext : ParserRuleContext {
		public ConditionContext C;
		public ITerminalNode Eof() { return GetToken(WDCLParser.Eof, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWDCLVisitor<TResult> typedVisitor = visitor as IWDCLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_parse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6; _localctx.C = condition(0);
			State = 7; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
	 
		public ConditionContext() { }
		public virtual void CopyFrom(ConditionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubconditionContext : ConditionContext {
		public IToken sub;
		public ITerminalNode ID() { return GetToken(WDCLParser.ID, 0); }
		public SubconditionContext(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.EnterSubcondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.ExitSubcondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWDCLVisitor<TResult> typedVisitor = visitor as IWDCLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubcondition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonSubCondContext : ConditionContext {
		public ConditionContext lC;
		public IToken op;
		public ConditionContext rC;
		public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(WDCLParser.EQ, 0); }
		public ITerminalNode NOTEQ() { return GetToken(WDCLParser.NOTEQ, 0); }
		public ComparisonSubCondContext(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.EnterComparisonSubCond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.ExitComparisonSubCond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWDCLVisitor<TResult> typedVisitor = visitor as IWDCLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonSubCond(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TrueContext : ConditionContext {
		public TrueContext(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.EnterTrue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.ExitTrue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWDCLVisitor<TResult> typedVisitor = visitor as IWDCLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FalseContext : ConditionContext {
		public FalseContext(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.EnterFalse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.ExitFalse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWDCLVisitor<TResult> typedVisitor = visitor as IWDCLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFalse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonCondContext : ConditionContext {
		public ExpContext lE;
		public IToken op;
		public ExpContext rE;
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(WDCLParser.EQ, 0); }
		public ITerminalNode NOTEQ() { return GetToken(WDCLParser.NOTEQ, 0); }
		public ITerminalNode LT() { return GetToken(WDCLParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(WDCLParser.GT, 0); }
		public ITerminalNode LTEQ() { return GetToken(WDCLParser.LTEQ, 0); }
		public ITerminalNode GTEQ() { return GetToken(WDCLParser.GTEQ, 0); }
		public ComparisonCondContext(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.EnterComparisonCond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.ExitComparisonCond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWDCLVisitor<TResult> typedVisitor = visitor as IWDCLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonCond(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenCondContext : ConditionContext {
		public ConditionContext c;
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ParenCondContext(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.EnterParenCond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.ExitParenCond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWDCLVisitor<TResult> typedVisitor = visitor as IWDCLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenCond(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetCondContext : ConditionContext {
		public IToken drv;
		public IToken n;
		public ITerminalNode IN() { return GetToken(WDCLParser.IN, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode ID() { return GetToken(WDCLParser.ID, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(WDCLParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(WDCLParser.COMMA, i);
		}
		public ITerminalNode NOT() { return GetToken(WDCLParser.NOT, 0); }
		public SetCondContext(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.EnterSetCond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.ExitSetCond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWDCLVisitor<TResult> typedVisitor = visitor as IWDCLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetCond(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolCondContext : ConditionContext {
		public ConditionContext lC;
		public IToken op;
		public ConditionContext rC;
		public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		public ITerminalNode AND() { return GetToken(WDCLParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(WDCLParser.OR, 0); }
		public BoolCondContext(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.EnterBoolCond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.ExitBoolCond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWDCLVisitor<TResult> typedVisitor = visitor as IWDCLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolCond(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotCondContext : ConditionContext {
		public ConditionContext c;
		public ITerminalNode NOT() { return GetToken(WDCLParser.NOT, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public NotCondContext(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.EnterNotCond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.ExitNotCond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWDCLVisitor<TResult> typedVisitor = visitor as IWDCLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotCond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		return condition(0);
	}

	private ConditionContext condition(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ConditionContext _localctx = new ConditionContext(_ctx, _parentState);
		ConditionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_condition, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				_localctx = new TrueContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 10; Match(T__0);
				}
				break;

			case 2:
				{
				_localctx = new FalseContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 11; Match(T__1);
				}
				break;

			case 3:
				{
				_localctx = new SubconditionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 12; ((SubconditionContext)_localctx).sub = Match(ID);
				}
				break;

			case 4:
				{
				_localctx = new ParenCondContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 13; Match(T__2);
				State = 14; ((ParenCondContext)_localctx).c = condition(0);
				State = 15; Match(T__3);
				}
				break;

			case 5:
				{
				_localctx = new ComparisonCondContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 17; ((ComparisonCondContext)_localctx).lE = exp(0);
				State = 18; ((ComparisonCondContext)_localctx).op = Match(EQ);
				State = 19; ((ComparisonCondContext)_localctx).rE = exp(0);
				}
				break;

			case 6:
				{
				_localctx = new ComparisonCondContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 21; ((ComparisonCondContext)_localctx).lE = exp(0);
				State = 22; ((ComparisonCondContext)_localctx).op = Match(NOTEQ);
				State = 23; ((ComparisonCondContext)_localctx).rE = exp(0);
				}
				break;

			case 7:
				{
				_localctx = new ComparisonCondContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 25; ((ComparisonCondContext)_localctx).lE = exp(0);
				State = 26; ((ComparisonCondContext)_localctx).op = Match(LT);
				State = 27; ((ComparisonCondContext)_localctx).rE = exp(0);
				}
				break;

			case 8:
				{
				_localctx = new ComparisonCondContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 29; ((ComparisonCondContext)_localctx).lE = exp(0);
				State = 30; ((ComparisonCondContext)_localctx).op = Match(GT);
				State = 31; ((ComparisonCondContext)_localctx).rE = exp(0);
				}
				break;

			case 9:
				{
				_localctx = new ComparisonCondContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 33; ((ComparisonCondContext)_localctx).lE = exp(0);
				State = 34; ((ComparisonCondContext)_localctx).op = Match(LTEQ);
				State = 35; ((ComparisonCondContext)_localctx).rE = exp(0);
				}
				break;

			case 10:
				{
				_localctx = new ComparisonCondContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 37; ((ComparisonCondContext)_localctx).lE = exp(0);
				State = 38; ((ComparisonCondContext)_localctx).op = Match(GTEQ);
				State = 39; ((ComparisonCondContext)_localctx).rE = exp(0);
				}
				break;

			case 11:
				{
				_localctx = new NotCondContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 41; Match(NOT);
				State = 42; Match(T__2);
				State = 43; ((NotCondContext)_localctx).c = condition(0);
				State = 44; Match(T__3);
				}
				break;

			case 12:
				{
				_localctx = new SetCondContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 46; ((SetCondContext)_localctx).drv = Match(ID);
				State = 47; Match(IN);
				State = 48; Match(T__2);
				State = 49; exp(0);
				State = 54;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 50; Match(COMMA);
					State = 51; exp(0);
					}
					}
					State = 56;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 57; Match(T__3);
				}
				break;

			case 13:
				{
				_localctx = new SetCondContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 59; ((SetCondContext)_localctx).drv = Match(ID);
				State = 60; ((SetCondContext)_localctx).n = Match(NOT);
				State = 61; Match(IN);
				State = 62; Match(T__2);
				State = 63; exp(0);
				State = 68;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 64; Match(COMMA);
					State = 65; exp(0);
					}
					}
					State = 70;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 71; Match(T__3);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 89;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 87;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
					case 1:
						{
						_localctx = new BoolCondContext(new ConditionContext(_parentctx, _parentState));
						((BoolCondContext)_localctx).lC = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_condition);
						State = 75;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 76; ((BoolCondContext)_localctx).op = Match(AND);
						State = 77; ((BoolCondContext)_localctx).rC = condition(7);
						}
						break;

					case 2:
						{
						_localctx = new BoolCondContext(new ConditionContext(_parentctx, _parentState));
						((BoolCondContext)_localctx).lC = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_condition);
						State = 78;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 79; ((BoolCondContext)_localctx).op = Match(OR);
						State = 80; ((BoolCondContext)_localctx).rC = condition(6);
						}
						break;

					case 3:
						{
						_localctx = new ComparisonSubCondContext(new ConditionContext(_parentctx, _parentState));
						((ComparisonSubCondContext)_localctx).lC = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_condition);
						State = 81;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 82; ((ComparisonSubCondContext)_localctx).op = Match(EQ);
						State = 83; ((ComparisonSubCondContext)_localctx).rC = condition(5);
						}
						break;

					case 4:
						{
						_localctx = new ComparisonSubCondContext(new ConditionContext(_parentctx, _parentState));
						((ComparisonSubCondContext)_localctx).lC = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_condition);
						State = 84;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 85; ((ComparisonSubCondContext)_localctx).op = Match(NOTEQ);
						State = 86; ((ComparisonSubCondContext)_localctx).rC = condition(4);
						}
						break;
					}
					} 
				}
				State = 91;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
	 
		public ExpContext() { }
		public virtual void CopyFrom(ExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AtomExpContext : ExpContext {
		public IToken atom;
		public ITerminalNode INT() { return GetToken(WDCLParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(WDCLParser.FLOAT, 0); }
		public ITerminalNode STRING() { return GetToken(WDCLParser.STRING, 0); }
		public ITerminalNode DATE() { return GetToken(WDCLParser.DATE, 0); }
		public AtomExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.EnterAtomExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.ExitAtomExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWDCLVisitor<TResult> typedVisitor = visitor as IWDCLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinarExpContext : ExpContext {
		public ExpContext lE;
		public IToken op;
		public ExpContext rE;
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode PLUS_OP() { return GetToken(WDCLParser.PLUS_OP, 0); }
		public ITerminalNode MINUS_OP() { return GetToken(WDCLParser.MINUS_OP, 0); }
		public ITerminalNode MUL_OP() { return GetToken(WDCLParser.MUL_OP, 0); }
		public ITerminalNode DIV_OP() { return GetToken(WDCLParser.DIV_OP, 0); }
		public ITerminalNode MOD_OP() { return GetToken(WDCLParser.MOD_OP, 0); }
		public ITerminalNode POW_OP() { return GetToken(WDCLParser.POW_OP, 0); }
		public BinarExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.EnterBinarExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.ExitBinarExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWDCLVisitor<TResult> typedVisitor = visitor as IWDCLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinarExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExpContext : ExpContext {
		public ExpContext e;
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ParenExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.EnterParenExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.ExitParenExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWDCLVisitor<TResult> typedVisitor = visitor as IWDCLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DriverExpContext : ExpContext {
		public IToken drv;
		public ITerminalNode ID() { return GetToken(WDCLParser.ID, 0); }
		public DriverExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.EnterDriverExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.ExitDriverExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWDCLVisitor<TResult> typedVisitor = visitor as IWDCLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDriverExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnarExpContext : ExpContext {
		public IToken op;
		public ExpContext e;
		public ITerminalNode MINUS_OP() { return GetToken(WDCLParser.MINUS_OP, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public UnarExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.EnterUnarExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.ExitUnarExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWDCLVisitor<TResult> typedVisitor = visitor as IWDCLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnarExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(_ctx, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_exp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INT:
				{
				_localctx = new AtomExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 93; ((AtomExpContext)_localctx).atom = Match(INT);
				}
				break;
			case FLOAT:
				{
				_localctx = new AtomExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 94; ((AtomExpContext)_localctx).atom = Match(FLOAT);
				}
				break;
			case STRING:
				{
				_localctx = new AtomExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 95; ((AtomExpContext)_localctx).atom = Match(STRING);
				}
				break;
			case DATE:
				{
				_localctx = new AtomExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 96; ((AtomExpContext)_localctx).atom = Match(DATE);
				}
				break;
			case ID:
				{
				_localctx = new DriverExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 97; ((DriverExpContext)_localctx).drv = Match(ID);
				}
				break;
			case T__2:
				{
				_localctx = new ParenExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 98; Match(T__2);
				State = 99; ((ParenExpContext)_localctx).e = exp(0);
				State = 100; Match(T__3);
				}
				break;
			case MINUS_OP:
				{
				_localctx = new UnarExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 102; ((UnarExpContext)_localctx).op = Match(MINUS_OP);
				State = 103; ((UnarExpContext)_localctx).e = exp(1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 126;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 124;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
					case 1:
						{
						_localctx = new BinarExpContext(new ExpContext(_parentctx, _parentState));
						((BinarExpContext)_localctx).lE = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 106;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 107; ((BinarExpContext)_localctx).op = Match(PLUS_OP);
						State = 108; ((BinarExpContext)_localctx).rE = exp(8);
						}
						break;

					case 2:
						{
						_localctx = new BinarExpContext(new ExpContext(_parentctx, _parentState));
						((BinarExpContext)_localctx).lE = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 109;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 110; ((BinarExpContext)_localctx).op = Match(MINUS_OP);
						State = 111; ((BinarExpContext)_localctx).rE = exp(7);
						}
						break;

					case 3:
						{
						_localctx = new BinarExpContext(new ExpContext(_parentctx, _parentState));
						((BinarExpContext)_localctx).lE = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 112;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 113; ((BinarExpContext)_localctx).op = Match(MUL_OP);
						State = 114; ((BinarExpContext)_localctx).rE = exp(6);
						}
						break;

					case 4:
						{
						_localctx = new BinarExpContext(new ExpContext(_parentctx, _parentState));
						((BinarExpContext)_localctx).lE = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 115;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 116; ((BinarExpContext)_localctx).op = Match(DIV_OP);
						State = 117; ((BinarExpContext)_localctx).rE = exp(5);
						}
						break;

					case 5:
						{
						_localctx = new BinarExpContext(new ExpContext(_parentctx, _parentState));
						((BinarExpContext)_localctx).lE = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 118;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 119; ((BinarExpContext)_localctx).op = Match(MOD_OP);
						State = 120; ((BinarExpContext)_localctx).rE = exp(4);
						}
						break;

					case 6:
						{
						_localctx = new BinarExpContext(new ExpContext(_parentctx, _parentState));
						((BinarExpContext)_localctx).lE = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 121;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 122; ((BinarExpContext)_localctx).op = Match(POW_OP);
						State = 123; ((BinarExpContext)_localctx).rE = exp(3);
						}
						break;
					}
					} 
				}
				State = 128;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return condition_sempred((ConditionContext)_localctx, predIndex);

		case 2: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool condition_sempred(ConditionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 6);

		case 1: return Precpred(_ctx, 5);

		case 2: return Precpred(_ctx, 4);

		case 3: return Precpred(_ctx, 3);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(_ctx, 7);

		case 5: return Precpred(_ctx, 6);

		case 6: return Precpred(_ctx, 5);

		case 7: return Precpred(_ctx, 4);

		case 8: return Precpred(_ctx, 3);

		case 9: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x1E\x84\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\a\x3\x37\n\x3\f\x3\xE\x3:\v\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3\x45\n\x3\f\x3\xE\x3H\v\x3"+
		"\x3\x3\x3\x3\x5\x3L\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3Z\n\x3\f\x3\xE\x3]\v\x3\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4k\n\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4\x7F\n\x4\f\x4\xE\x4\x82\v"+
		"\x4\x3\x4\x2\x2\x4\x4\x6\x5\x2\x2\x4\x2\x6\x2\x2\x2\x9E\x2\b\x3\x2\x2"+
		"\x2\x4K\x3\x2\x2\x2\x6j\x3\x2\x2\x2\b\t\x5\x4\x3\x2\t\n\a\x2\x2\x3\n\x3"+
		"\x3\x2\x2\x2\v\f\b\x3\x1\x2\fL\a\x3\x2\x2\rL\a\x4\x2\x2\xEL\a\x18\x2\x2"+
		"\xF\x10\a\x5\x2\x2\x10\x11\x5\x4\x3\x2\x11\x12\a\x6\x2\x2\x12L\x3\x2\x2"+
		"\x2\x13\x14\x5\x6\x4\x2\x14\x15\a\n\x2\x2\x15\x16\x5\x6\x4\x2\x16L\x3"+
		"\x2\x2\x2\x17\x18\x5\x6\x4\x2\x18\x19\a\v\x2\x2\x19\x1A\x5\x6\x4\x2\x1A"+
		"L\x3\x2\x2\x2\x1B\x1C\x5\x6\x4\x2\x1C\x1D\a\r\x2\x2\x1D\x1E\x5\x6\x4\x2"+
		"\x1EL\x3\x2\x2\x2\x1F \x5\x6\x4\x2 !\a\xF\x2\x2!\"\x5\x6\x4\x2\"L\x3\x2"+
		"\x2\x2#$\x5\x6\x4\x2$%\a\f\x2\x2%&\x5\x6\x4\x2&L\x3\x2\x2\x2\'(\x5\x6"+
		"\x4\x2()\a\xE\x2\x2)*\x5\x6\x4\x2*L\x3\x2\x2\x2+,\a\a\x2\x2,-\a\x5\x2"+
		"\x2-.\x5\x4\x3\x2./\a\x6\x2\x2/L\x3\x2\x2\x2\x30\x31\a\x18\x2\x2\x31\x32"+
		"\a\x10\x2\x2\x32\x33\a\x5\x2\x2\x33\x38\x5\x6\x4\x2\x34\x35\a\x11\x2\x2"+
		"\x35\x37\x5\x6\x4\x2\x36\x34\x3\x2\x2\x2\x37:\x3\x2\x2\x2\x38\x36\x3\x2"+
		"\x2\x2\x38\x39\x3\x2\x2\x2\x39;\x3\x2\x2\x2:\x38\x3\x2\x2\x2;<\a\x6\x2"+
		"\x2<L\x3\x2\x2\x2=>\a\x18\x2\x2>?\a\a\x2\x2?@\a\x10\x2\x2@\x41\a\x5\x2"+
		"\x2\x41\x46\x5\x6\x4\x2\x42\x43\a\x11\x2\x2\x43\x45\x5\x6\x4\x2\x44\x42"+
		"\x3\x2\x2\x2\x45H\x3\x2\x2\x2\x46\x44\x3\x2\x2\x2\x46G\x3\x2\x2\x2GI\x3"+
		"\x2\x2\x2H\x46\x3\x2\x2\x2IJ\a\x6\x2\x2JL\x3\x2\x2\x2K\v\x3\x2\x2\x2K"+
		"\r\x3\x2\x2\x2K\xE\x3\x2\x2\x2K\xF\x3\x2\x2\x2K\x13\x3\x2\x2\x2K\x17\x3"+
		"\x2\x2\x2K\x1B\x3\x2\x2\x2K\x1F\x3\x2\x2\x2K#\x3\x2\x2\x2K\'\x3\x2\x2"+
		"\x2K+\x3\x2\x2\x2K\x30\x3\x2\x2\x2K=\x3\x2\x2\x2L[\x3\x2\x2\x2MN\f\b\x2"+
		"\x2NO\a\b\x2\x2OZ\x5\x4\x3\tPQ\f\a\x2\x2QR\a\t\x2\x2RZ\x5\x4\x3\bST\f"+
		"\x6\x2\x2TU\a\n\x2\x2UZ\x5\x4\x3\aVW\f\x5\x2\x2WX\a\v\x2\x2XZ\x5\x4\x3"+
		"\x6YM\x3\x2\x2\x2YP\x3\x2\x2\x2YS\x3\x2\x2\x2YV\x3\x2\x2\x2Z]\x3\x2\x2"+
		"\x2[Y\x3\x2\x2\x2[\\\x3\x2\x2\x2\\\x5\x3\x2\x2\x2][\x3\x2\x2\x2^_\b\x4"+
		"\x1\x2_k\a\x19\x2\x2`k\a\x1A\x2\x2\x61k\a\x1E\x2\x2\x62k\a\x1B\x2\x2\x63"+
		"k\a\x18\x2\x2\x64\x65\a\x5\x2\x2\x65\x66\x5\x6\x4\x2\x66g\a\x6\x2\x2g"+
		"k\x3\x2\x2\x2hi\a\x13\x2\x2ik\x5\x6\x4\x3j^\x3\x2\x2\x2j`\x3\x2\x2\x2"+
		"j\x61\x3\x2\x2\x2j\x62\x3\x2\x2\x2j\x63\x3\x2\x2\x2j\x64\x3\x2\x2\x2j"+
		"h\x3\x2\x2\x2k\x80\x3\x2\x2\x2lm\f\t\x2\x2mn\a\x12\x2\x2n\x7F\x5\x6\x4"+
		"\nop\f\b\x2\x2pq\a\x13\x2\x2q\x7F\x5\x6\x4\trs\f\a\x2\x2st\a\x14\x2\x2"+
		"t\x7F\x5\x6\x4\buv\f\x6\x2\x2vw\a\x15\x2\x2w\x7F\x5\x6\x4\axy\f\x5\x2"+
		"\x2yz\a\x16\x2\x2z\x7F\x5\x6\x4\x6{|\f\x4\x2\x2|}\a\x17\x2\x2}\x7F\x5"+
		"\x6\x4\x5~l\x3\x2\x2\x2~o\x3\x2\x2\x2~r\x3\x2\x2\x2~u\x3\x2\x2\x2~x\x3"+
		"\x2\x2\x2~{\x3\x2\x2\x2\x7F\x82\x3\x2\x2\x2\x80~\x3\x2\x2\x2\x80\x81\x3"+
		"\x2\x2\x2\x81\a\x3\x2\x2\x2\x82\x80\x3\x2\x2\x2\n\x38\x46KY[j~\x80";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace WDCL
