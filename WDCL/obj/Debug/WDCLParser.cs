//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\porziod\Documents\Visual Studio 2015\Projects\WDCL\WDCL\WDCL.g4 by ANTLR 4.6.4

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace WDCL {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.4")]
[System.CLSCompliant(false)]
public partial class WDCLParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, NOT=5, AND=6, OR=7, EQ=8, NOTEQ=9, LTEQ=10, 
		LT=11, GTEQ=12, GT=13, IN=14, COMMA=15, PLUS_OP=16, MINUS_OP=17, MUL_OP=18, 
		DIV_OP=19, MOD_OP=20, POW_OP=21, ID=22, INT=23, FLOAT=24, DATE=25, COMMENT=26, 
		WS=27, STRING=28;
	public const int
		RULE_parse = 0, RULE_condition = 1, RULE_exp = 2;
	public static readonly string[] ruleNames = {
		"parse", "condition", "exp"
	};

	private static readonly string[] _LiteralNames = {
		null, "'true'", "'false'", "'('", "')'", "'NOT'", "'AND'", "'OR'", "'='", 
		"'<>'", "'<='", "'<'", "'>='", "'>'", "'IN'", "','", "'+'", "'-'", "'*'", 
		"'/'", "'%'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "NOT", "AND", "OR", "EQ", "NOTEQ", "LTEQ", 
		"LT", "GTEQ", "GT", "IN", "COMMA", "PLUS_OP", "MINUS_OP", "MUL_OP", "DIV_OP", 
		"MOD_OP", "POW_OP", "ID", "INT", "FLOAT", "DATE", "COMMENT", "WS", "STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "WDCL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public WDCLParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ParseContext : ParserRuleContext {
		public ConditionContext C;
		public ITerminalNode Eof() { return GetToken(WDCLParser.Eof, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWDCLVisitor<TResult> typedVisitor = visitor as IWDCLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_parse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6; _localctx.C = condition(0);
			State = 7; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
	 
		public ConditionContext() { }
		public virtual void CopyFrom(ConditionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubconditionContext : ConditionContext {
		public IToken sub;
		public ITerminalNode ID() { return GetToken(WDCLParser.ID, 0); }
		public SubconditionContext(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.EnterSubcondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.ExitSubcondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWDCLVisitor<TResult> typedVisitor = visitor as IWDCLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubcondition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TrueContext : ConditionContext {
		public TrueContext(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.EnterTrue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.ExitTrue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWDCLVisitor<TResult> typedVisitor = visitor as IWDCLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FalseContext : ConditionContext {
		public FalseContext(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.EnterFalse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.ExitFalse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWDCLVisitor<TResult> typedVisitor = visitor as IWDCLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFalse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonCondContext : ConditionContext {
		public ExpContext lE;
		public IToken op;
		public ExpContext rE;
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(WDCLParser.EQ, 0); }
		public ITerminalNode NOTEQ() { return GetToken(WDCLParser.NOTEQ, 0); }
		public ITerminalNode LT() { return GetToken(WDCLParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(WDCLParser.GT, 0); }
		public ITerminalNode LTEQ() { return GetToken(WDCLParser.LTEQ, 0); }
		public ITerminalNode GTEQ() { return GetToken(WDCLParser.GTEQ, 0); }
		public ComparisonCondContext(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.EnterComparisonCond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.ExitComparisonCond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWDCLVisitor<TResult> typedVisitor = visitor as IWDCLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonCond(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenCondContext : ConditionContext {
		public ConditionContext c;
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ParenCondContext(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.EnterParenCond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.ExitParenCond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWDCLVisitor<TResult> typedVisitor = visitor as IWDCLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenCond(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolCondContext : ConditionContext {
		public ConditionContext lC;
		public IToken op;
		public ConditionContext rC;
		public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		public ITerminalNode AND() { return GetToken(WDCLParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(WDCLParser.OR, 0); }
		public BoolCondContext(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.EnterBoolCond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.ExitBoolCond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWDCLVisitor<TResult> typedVisitor = visitor as IWDCLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolCond(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotCondContext : ConditionContext {
		public ConditionContext c;
		public ITerminalNode NOT() { return GetToken(WDCLParser.NOT, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public NotCondContext(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.EnterNotCond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.ExitNotCond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWDCLVisitor<TResult> typedVisitor = visitor as IWDCLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotCond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		return condition(0);
	}

	private ConditionContext condition(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ConditionContext _localctx = new ConditionContext(_ctx, _parentState);
		ConditionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_condition, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				_localctx = new TrueContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 10; Match(T__0);
				}
				break;

			case 2:
				{
				_localctx = new FalseContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 11; Match(T__1);
				}
				break;

			case 3:
				{
				_localctx = new SubconditionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 12; ((SubconditionContext)_localctx).sub = Match(ID);
				}
				break;

			case 4:
				{
				_localctx = new ParenCondContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 13; Match(T__2);
				State = 14; ((ParenCondContext)_localctx).c = condition(0);
				State = 15; Match(T__3);
				}
				break;

			case 5:
				{
				_localctx = new ComparisonCondContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 17; ((ComparisonCondContext)_localctx).lE = exp(0);
				State = 18; ((ComparisonCondContext)_localctx).op = Match(EQ);
				State = 19; ((ComparisonCondContext)_localctx).rE = exp(0);
				}
				break;

			case 6:
				{
				_localctx = new ComparisonCondContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 21; ((ComparisonCondContext)_localctx).lE = exp(0);
				State = 22; ((ComparisonCondContext)_localctx).op = Match(NOTEQ);
				State = 23; ((ComparisonCondContext)_localctx).rE = exp(0);
				}
				break;

			case 7:
				{
				_localctx = new ComparisonCondContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 25; ((ComparisonCondContext)_localctx).lE = exp(0);
				State = 26; ((ComparisonCondContext)_localctx).op = Match(LT);
				State = 27; ((ComparisonCondContext)_localctx).rE = exp(0);
				}
				break;

			case 8:
				{
				_localctx = new ComparisonCondContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 29; ((ComparisonCondContext)_localctx).lE = exp(0);
				State = 30; ((ComparisonCondContext)_localctx).op = Match(GT);
				State = 31; ((ComparisonCondContext)_localctx).rE = exp(0);
				}
				break;

			case 9:
				{
				_localctx = new ComparisonCondContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 33; ((ComparisonCondContext)_localctx).lE = exp(0);
				State = 34; ((ComparisonCondContext)_localctx).op = Match(LTEQ);
				State = 35; ((ComparisonCondContext)_localctx).rE = exp(0);
				}
				break;

			case 10:
				{
				_localctx = new ComparisonCondContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 37; ((ComparisonCondContext)_localctx).lE = exp(0);
				State = 38; ((ComparisonCondContext)_localctx).op = Match(GTEQ);
				State = 39; ((ComparisonCondContext)_localctx).rE = exp(0);
				}
				break;

			case 11:
				{
				_localctx = new NotCondContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 41; Match(NOT);
				State = 42; Match(T__2);
				State = 43; ((NotCondContext)_localctx).c = condition(0);
				State = 44; Match(T__3);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 56;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 54;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
					case 1:
						{
						_localctx = new BoolCondContext(new ConditionContext(_parentctx, _parentState));
						((BoolCondContext)_localctx).lC = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_condition);
						State = 48;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 49; ((BoolCondContext)_localctx).op = Match(AND);
						State = 50; ((BoolCondContext)_localctx).rC = condition(3);
						}
						break;

					case 2:
						{
						_localctx = new BoolCondContext(new ConditionContext(_parentctx, _parentState));
						((BoolCondContext)_localctx).lC = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_condition);
						State = 51;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 52; ((BoolCondContext)_localctx).op = Match(OR);
						State = 53; ((BoolCondContext)_localctx).rC = condition(2);
						}
						break;
					}
					} 
				}
				State = 58;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
	 
		public ExpContext() { }
		public virtual void CopyFrom(ExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AtomExpContext : ExpContext {
		public IToken atom;
		public ITerminalNode INT() { return GetToken(WDCLParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(WDCLParser.FLOAT, 0); }
		public ITerminalNode STRING() { return GetToken(WDCLParser.STRING, 0); }
		public ITerminalNode DATE() { return GetToken(WDCLParser.DATE, 0); }
		public AtomExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.EnterAtomExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.ExitAtomExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWDCLVisitor<TResult> typedVisitor = visitor as IWDCLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinarExpContext : ExpContext {
		public ExpContext lE;
		public IToken op;
		public ExpContext rE;
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode PLUS_OP() { return GetToken(WDCLParser.PLUS_OP, 0); }
		public ITerminalNode MINUS_OP() { return GetToken(WDCLParser.MINUS_OP, 0); }
		public ITerminalNode MUL_OP() { return GetToken(WDCLParser.MUL_OP, 0); }
		public ITerminalNode DIV_OP() { return GetToken(WDCLParser.DIV_OP, 0); }
		public ITerminalNode MOD_OP() { return GetToken(WDCLParser.MOD_OP, 0); }
		public ITerminalNode POW_OP() { return GetToken(WDCLParser.POW_OP, 0); }
		public BinarExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.EnterBinarExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.ExitBinarExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWDCLVisitor<TResult> typedVisitor = visitor as IWDCLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinarExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExpContext : ExpContext {
		public ExpContext e;
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ParenExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.EnterParenExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.ExitParenExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWDCLVisitor<TResult> typedVisitor = visitor as IWDCLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DriverExpContext : ExpContext {
		public IToken drv;
		public ITerminalNode ID() { return GetToken(WDCLParser.ID, 0); }
		public DriverExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.EnterDriverExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.ExitDriverExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWDCLVisitor<TResult> typedVisitor = visitor as IWDCLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDriverExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnarExpContext : ExpContext {
		public IToken op;
		public ExpContext e;
		public ITerminalNode MINUS_OP() { return GetToken(WDCLParser.MINUS_OP, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public UnarExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.EnterUnarExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWDCLListener typedListener = listener as IWDCLListener;
			if (typedListener != null) typedListener.ExitUnarExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWDCLVisitor<TResult> typedVisitor = visitor as IWDCLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnarExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(_ctx, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_exp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INT:
				{
				_localctx = new AtomExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 60; ((AtomExpContext)_localctx).atom = Match(INT);
				}
				break;
			case FLOAT:
				{
				_localctx = new AtomExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 61; ((AtomExpContext)_localctx).atom = Match(FLOAT);
				}
				break;
			case STRING:
				{
				_localctx = new AtomExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 62; ((AtomExpContext)_localctx).atom = Match(STRING);
				}
				break;
			case DATE:
				{
				_localctx = new AtomExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 63; ((AtomExpContext)_localctx).atom = Match(DATE);
				}
				break;
			case ID:
				{
				_localctx = new DriverExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 64; ((DriverExpContext)_localctx).drv = Match(ID);
				}
				break;
			case T__2:
				{
				_localctx = new ParenExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 65; Match(T__2);
				State = 66; ((ParenExpContext)_localctx).e = exp(0);
				State = 67; Match(T__3);
				}
				break;
			case MINUS_OP:
				{
				_localctx = new UnarExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 69; ((UnarExpContext)_localctx).op = Match(MINUS_OP);
				State = 70; ((UnarExpContext)_localctx).e = exp(1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 93;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 91;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
					case 1:
						{
						_localctx = new BinarExpContext(new ExpContext(_parentctx, _parentState));
						((BinarExpContext)_localctx).lE = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 73;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 74; ((BinarExpContext)_localctx).op = Match(PLUS_OP);
						State = 75; ((BinarExpContext)_localctx).rE = exp(8);
						}
						break;

					case 2:
						{
						_localctx = new BinarExpContext(new ExpContext(_parentctx, _parentState));
						((BinarExpContext)_localctx).lE = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 76;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 77; ((BinarExpContext)_localctx).op = Match(MINUS_OP);
						State = 78; ((BinarExpContext)_localctx).rE = exp(7);
						}
						break;

					case 3:
						{
						_localctx = new BinarExpContext(new ExpContext(_parentctx, _parentState));
						((BinarExpContext)_localctx).lE = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 79;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 80; ((BinarExpContext)_localctx).op = Match(MUL_OP);
						State = 81; ((BinarExpContext)_localctx).rE = exp(6);
						}
						break;

					case 4:
						{
						_localctx = new BinarExpContext(new ExpContext(_parentctx, _parentState));
						((BinarExpContext)_localctx).lE = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 82;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 83; ((BinarExpContext)_localctx).op = Match(DIV_OP);
						State = 84; ((BinarExpContext)_localctx).rE = exp(5);
						}
						break;

					case 5:
						{
						_localctx = new BinarExpContext(new ExpContext(_parentctx, _parentState));
						((BinarExpContext)_localctx).lE = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 85;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 86; ((BinarExpContext)_localctx).op = Match(MOD_OP);
						State = 87; ((BinarExpContext)_localctx).rE = exp(4);
						}
						break;

					case 6:
						{
						_localctx = new BinarExpContext(new ExpContext(_parentctx, _parentState));
						((BinarExpContext)_localctx).lE = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 88;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 89; ((BinarExpContext)_localctx).op = Match(POW_OP);
						State = 90; ((BinarExpContext)_localctx).rE = exp(3);
						}
						break;
					}
					} 
				}
				State = 95;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return condition_sempred((ConditionContext)_localctx, predIndex);

		case 2: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool condition_sempred(ConditionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 2);

		case 1: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 7);

		case 3: return Precpred(_ctx, 6);

		case 4: return Precpred(_ctx, 5);

		case 5: return Precpred(_ctx, 4);

		case 6: return Precpred(_ctx, 3);

		case 7: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x1E\x63\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x31\n"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3\x39\n\x3\f\x3\xE\x3<\v\x3"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x5\x4J\n\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4^\n\x4\f\x4"+
		"\xE\x4\x61\v\x4\x3\x4\x2\x2\x4\x4\x6\x5\x2\x2\x4\x2\x6\x2\x2\x2w\x2\b"+
		"\x3\x2\x2\x2\x4\x30\x3\x2\x2\x2\x6I\x3\x2\x2\x2\b\t\x5\x4\x3\x2\t\n\a"+
		"\x2\x2\x3\n\x3\x3\x2\x2\x2\v\f\b\x3\x1\x2\f\x31\a\x3\x2\x2\r\x31\a\x4"+
		"\x2\x2\xE\x31\a\x18\x2\x2\xF\x10\a\x5\x2\x2\x10\x11\x5\x4\x3\x2\x11\x12"+
		"\a\x6\x2\x2\x12\x31\x3\x2\x2\x2\x13\x14\x5\x6\x4\x2\x14\x15\a\n\x2\x2"+
		"\x15\x16\x5\x6\x4\x2\x16\x31\x3\x2\x2\x2\x17\x18\x5\x6\x4\x2\x18\x19\a"+
		"\v\x2\x2\x19\x1A\x5\x6\x4\x2\x1A\x31\x3\x2\x2\x2\x1B\x1C\x5\x6\x4\x2\x1C"+
		"\x1D\a\r\x2\x2\x1D\x1E\x5\x6\x4\x2\x1E\x31\x3\x2\x2\x2\x1F \x5\x6\x4\x2"+
		" !\a\xF\x2\x2!\"\x5\x6\x4\x2\"\x31\x3\x2\x2\x2#$\x5\x6\x4\x2$%\a\f\x2"+
		"\x2%&\x5\x6\x4\x2&\x31\x3\x2\x2\x2\'(\x5\x6\x4\x2()\a\xE\x2\x2)*\x5\x6"+
		"\x4\x2*\x31\x3\x2\x2\x2+,\a\a\x2\x2,-\a\x5\x2\x2-.\x5\x4\x3\x2./\a\x6"+
		"\x2\x2/\x31\x3\x2\x2\x2\x30\v\x3\x2\x2\x2\x30\r\x3\x2\x2\x2\x30\xE\x3"+
		"\x2\x2\x2\x30\xF\x3\x2\x2\x2\x30\x13\x3\x2\x2\x2\x30\x17\x3\x2\x2\x2\x30"+
		"\x1B\x3\x2\x2\x2\x30\x1F\x3\x2\x2\x2\x30#\x3\x2\x2\x2\x30\'\x3\x2\x2\x2"+
		"\x30+\x3\x2\x2\x2\x31:\x3\x2\x2\x2\x32\x33\f\x4\x2\x2\x33\x34\a\b\x2\x2"+
		"\x34\x39\x5\x4\x3\x5\x35\x36\f\x3\x2\x2\x36\x37\a\t\x2\x2\x37\x39\x5\x4"+
		"\x3\x4\x38\x32\x3\x2\x2\x2\x38\x35\x3\x2\x2\x2\x39<\x3\x2\x2\x2:\x38\x3"+
		"\x2\x2\x2:;\x3\x2\x2\x2;\x5\x3\x2\x2\x2<:\x3\x2\x2\x2=>\b\x4\x1\x2>J\a"+
		"\x19\x2\x2?J\a\x1A\x2\x2@J\a\x1E\x2\x2\x41J\a\x1B\x2\x2\x42J\a\x18\x2"+
		"\x2\x43\x44\a\x5\x2\x2\x44\x45\x5\x6\x4\x2\x45\x46\a\x6\x2\x2\x46J\x3"+
		"\x2\x2\x2GH\a\x13\x2\x2HJ\x5\x6\x4\x3I=\x3\x2\x2\x2I?\x3\x2\x2\x2I@\x3"+
		"\x2\x2\x2I\x41\x3\x2\x2\x2I\x42\x3\x2\x2\x2I\x43\x3\x2\x2\x2IG\x3\x2\x2"+
		"\x2J_\x3\x2\x2\x2KL\f\t\x2\x2LM\a\x12\x2\x2M^\x5\x6\x4\nNO\f\b\x2\x2O"+
		"P\a\x13\x2\x2P^\x5\x6\x4\tQR\f\a\x2\x2RS\a\x14\x2\x2S^\x5\x6\x4\bTU\f"+
		"\x6\x2\x2UV\a\x15\x2\x2V^\x5\x6\x4\aWX\f\x5\x2\x2XY\a\x16\x2\x2Y^\x5\x6"+
		"\x4\x6Z[\f\x4\x2\x2[\\\a\x17\x2\x2\\^\x5\x6\x4\x5]K\x3\x2\x2\x2]N\x3\x2"+
		"\x2\x2]Q\x3\x2\x2\x2]T\x3\x2\x2\x2]W\x3\x2\x2\x2]Z\x3\x2\x2\x2^\x61\x3"+
		"\x2\x2\x2_]\x3\x2\x2\x2_`\x3\x2\x2\x2`\a\x3\x2\x2\x2\x61_\x3\x2\x2\x2"+
		"\b\x30\x38:I]_";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace WDCL
